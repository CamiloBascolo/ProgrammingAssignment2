##Matrix inversion is typically a resource intersive operation,

 ## and there may be advantages in preserving the computed inverse of

## a matrix rather than repeatedly calculating it. The following code

## includes two functions designed to create a specialized object for

#matrix sorage with cached inverses

 makeCacheMatrix <- function (x = matrix()){

	i <- NULL

	set <- function (y) {

		x <<- y

		i <<- NULL

	}

	get <- function()x

	setinverse <- function(inverse) i<<- inverse 

 	getinverse <- function()i

 	list( set = set, get = get, setinverse = setinverse, getinverse = getinverse)

 }

 ##This function calculates the inverse of the custom matrix generated by the makeCacheMatrix function described above. If the inverse been previously computed, this function should retrieve the cached inverse

 cacheSolve <- function(x, ...) {

 	i <- x$getinverse()

 	if (!is.null(i)) {

 		message("getting cached data")

 		return(i)

 	}

 	data <- x$get()

 	i <- solve(data, ...)

	x$setinverse(i)

 	i

}

